
Handling of AppendEntries messages
==================================

State
-----
- The leader maintains
         - last_appended：添加到日志的最后一个条目的索引（请参阅Log.txt）
     - commit-index：最高承诺条目的索引
- The leader maintains (for each member P)
         - next-index：要发送到P的下一个条目的索引（初始化为last_appended +1）
     - match-index：已知要复制到P的最高条目的索引（初始化为0）
     - commit-index：已知由P提交的最高条目的索引。这只是需要的，因为 - 与RAFT文件相反 - AppendEntries请求只发送到P.next_index> last_appended，而不是持续（也作为心跳）。 初始化为0。


Adding an entry at the leader
-----------------------------
- The leader sets curr-index to ++last-appended and appends the entry to its log at index curr-index
- A new entry for curr-index is added to request-table
- An AppendEntries request is sent to all cluster members (except the leader)



On reception of an AppendEntries request req(prev-index,prev-term) from P
-------------------------------------------------------------------------
- On the followers only
- If req.term < current-term -> send an AppendEntries(false) response to P and return
- Set current-term to req.term and leader to req.leader
- prev = log.get(prev-index)
- curr-index=prev-index +1
- If req is empty:
    - Apply all log entries from commit-index+1 to req.commit-index
    - Set commit-index to req.commit-index
    - Send an AppendEntries(true) response with commit-index to P
- Else
    - If prev == null and prev-index > 0
        - Send AppendEntries(false) response with index=last-appended
        - Return
    - If prev-index == 0 or prev-term == prev.term
        - Get the entry at index curr-index
        - If not empty and terms don't match: delete entry at curr-index and all following entries
        - Append new entry at index curr-index
        - Send AppendEntries(true) response with index=curr-index
    - Else
        - If prev != null -> send AppendEntries(false) response with first index of conflicting term
        - Else -> send AppendEntries(true) response with curr-index


On reception of an AppendEntries response rsp(index,commit-index) from P
------------------------------------------------------------------------
- Set P.commit-index to max(P.commit-index, rsp.commit-index)
- Success:
    - Set P.match-index=rsp.index and P.next-index=rsp.index+1
    - Add response to request-table
        - If majority:
            - Apply log entries in range [commit-index+1 .. rsp.index] to state machine
            - Set commit-index to index of last successfully applied entry
    [optimization]
    - Send AppendEntries in range [P.match-index+1 .. last_appended] to P
      // 1 message ? otherwise we'll send all msgs in this range to P, which causes more traffic than necessary
- Failure:
    - Set P.next-index=rsp.index


Periodic resending of AppendEntries requests
--------------------------------------------
- Performed on the *leader* only
- Executed every RAFT.resend_interval ms
- For each member P in the CommitTable (RAFT.commit_table):
    - If P.next-index < log.first_applied: // e.g. my log is [15 .. 120], but P.next-index is 10
        - Send snapshot to P
        - continue
    - If last_appended >= P.next-index:
        - Send AppendEntries request with entry at index P.next-index and commit-index
        - continue
    - If commit-index > P.commit-index:
        - Send AppendEntries message with empty entry and commit-index


On reception of snapshot S from P
---------------------------------
- Apply S to the state machine
- Truncate the log at S.last_included_index and S.last_included_term
- Set last-appended